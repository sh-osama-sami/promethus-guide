

- name: add Prometheus user with no shell
  user:
    name: prometheus
    shell: /bin/false
    createhome: no

- name: create Prometheus configuration libraries directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ prometheus_config_dir }}"
    - "{{ prometheus_data_dir }}"

- name: give ownership to Prometheus of its library directory
  file:
    path: "{{ prometheus_data_dir }}"
    owner: prometheus
    group: prometheus

- name: download Prometheus installation directory
  get_url:
    url: "{{ prometheus_download_url }}"
    dest: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"

- name: extract files
  unarchive:
    src: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
    dest: "/tmp/"
    remote_src: yes

- name: Check if files exist
  stat:
    path: "{{ item.src }}"
  loop:
    - { src: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64/console*", dest: "{{ prometheus_config_dir }}" }
    - { src: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64/prometheus.yml", dest: "{{ prometheus_config_dir }}" }
  register: file_info

- name: Move files if they exist
  command: mv "{{ item.item.src }}" "{{ item.item.dest }}"
  loop: "{{ file_info.results }}"
  when: item.stat.exists

- name: copy binary files like promtool and Prometheus
  command: mv {{ item.src }} {{ item.dest }}
  with_items:
    - { src: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64/prometheus", dest: "{{ prometheus_install_dir }}" }
    - { src: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64/promtool", dest: "{{ prometheus_install_dir }}" }

- name: create the service file to be able to restart the Prometheus service
  copy:
    src: "{{ prometheus_service_src }}"
    dest: "{{ prometheus_service_dest }}"
  notify: Reload systemd

- name: start and enable Prometheus service
  systemd:
    name: prometheus
    state: started
    enabled: yes



